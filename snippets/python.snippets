#Crunchbangs
snippet #! generic
	#!/usr/bin/env python
	
	'''${1:blah blah}'''
	${2}
snippet #! python2
	#!/usr/bin/env python${1:2.7}

	'''${2:blah blah}'''
	
	from __future__ import print_function
	${3}
snippet #! python3
	#!/usr/bin/env python${1:3}
	'''${2:blah blah}'''
	${3}
#imports
snippet imp import module
	import ${1:module}
snippet imp import module as
	import ${1:module} as ${2:foo}
snippet imp from module import foo
	from ${1:module} import ${2:foo}
snippet imp from module import foo
	from ${1:module} import ${2:foo} as ${3:bar}
snippet imp Numpy
	import numpy as np
	import scipy as sp
	from matplotlib import pyplot as plt# Module Docstring
	${}
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:pass}
#if etc
snippet if if
	if ${1:condition}:
		${2:pass}
	${3}
snippet if if-else
	if ${1:condition}:
		${2:pass}
	else:
		${3:pass}
	${4}
snippet else
	else:
		${1:pass}
	${2}
snippet elif
	elif ${1:condition}:
		${2:pass}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# Decorator Property
snippet @pr
	@property
	def ${1:foo}(self):
		"""${2:blah blah}"""
		return self._$1
	
	@$1.setter
	def $1(self, ${3:v}):
		self._$1 = $3
	
	@$1.deleter
	def $1(self):
		if hasttr(self, _$1):
			del self._$1
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:BaseException} as ${3:err}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:BaseException} as ${3:err}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:BaseException} as ${3:err}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:BaseException} as ${3:err}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
# python debugger (pdb)
snippet pdb
	import pdb; pdb.set_trace()
	${1}
snippet todo
	# TODO: ${1:some shit}
